/* SP sp_add_call */
DELIMITER $$
CREATE DEFINER=`infra`@`%` PROCEDURE `sp_add_call`(numberlinefrom INT, numberlineto INT, durationmin INT, datecall datetime)
begin


	SET @areaCodeFrom = LEFT(numberlinefrom, LENGTH(numberlinefrom)-6);
    	SET @numberlinefrom = SUBSTRING(numberlinefrom ,-6);
    	SET @areaCodeTo = LEFT(numberlineto, LENGTH(numberlineto)-6);
    	SET @numberlineto = SUBSTRING(numberlineto ,-6);
    	SET @cityIdFrom = 0;
    	SET @cityIdTo = 0;
    	SET @rateId = 0;
    	SET @linefrom = 0;
    	SET @lineto = 0;
    	SET @minprice = 0.00;

    	/*	SET VARIABLES */
    	select id into @cityIdFrom from cities c2 where arecode = @areaCodeFrom;
    	select id into @cityIdTo from cities c2 where arecode = @areaCodeTo;
    	select id into @rateId from rates where cityid_from = @cityIdFrom and cityid_to = @cityIdTo;
    	select id into @linefrom from phonelines where numberline = @numberlinefrom and city_id = @cityIdFrom and active = 1;
    	select id into @lineto from phonelines where numberline = @numberlineto and city_id = @cityIdTo and active = 1;
    	select price into @minprice from rates r where id = @rateId;

    	if(@rateId <> 0 and @linefrom <> 0 and @lineto <> 0)then

    		insert into calls (lineid_from ,lineid_to ,duration , rate_id , amount ,createdon )
    		values (@linefrom, @lineto, durationmin, @rateId, (@minprice * cast(durationmin as DECIMAL(10,2) )), datecall);
    		SELECT
    		    c2.id,
                c2.lineid_from,
                c2.lineid_to,
                c2.duration,
                c2.rate_id,
                c2.amount,
                c2.createdon
    		from calls c2 where id = LAST_INSERT_ID();

    	else
    		if(@rateId = 0)
    			then signal sqlstate '01000' set MESSAGE_TEXT = 'No existe tarifa para las ciudades de la llamada', MYSQL_ERRNO =  1000;

    		elseif ( @rateId <> 0 and (@linefrom = 0 or @lineto = 0 ))
    			then signal sqlstate '01000' set MESSAGE_TEXT = 'No es posible crear la llamada, las lineas telefonicas no existen o se encuentran desactivadas', MYSQL_ERRNO =  1000;
    		end if;
    	end if;
end$$
DELIMITER ;

/* 
Example call
call sp_add_call(11, 481234, 11, 492345, 10, '2020-01-01 10:11:10.0') 

*/
/*Trigger to prevent duplicated data*/
CREATE trigger tbi_createCall before insert on calls for each row
begin 
	if exists (select * from calls c2  where lineid_from = new.lineid_from and lineid_to = new.lineid_to and createdon = new.createdon) then 
	signal sqlstate '45000'
	set message_text = 'Llamada existente, accion bloqueada';
	end if;
end

/*-------------------------- REPORTS --------------------------*/
/*Call report by user*/

DELIMITER $$
CREATE PROCEDURE `sp_getCallsByUserByDate`(IN `datefrom` DATE,IN `dateto` DATE, IN `userid` INT)
begin
select
    	c.id as "Id",
		concat(
			ct.arecode,
			pl.numberline
		) as "Line",
		concat(
			ct2.arecode,
			pl2.numberline
		) as "Destination",
		c.createdon as "Date",
		c.duration as "MinDuration",
		r.price as "MinPrice",
		c.amount as "TotalAmount"
	from calls c
		inner join phonelines pl on c.lineid_from = pl.id
		inner join phonelines pl2 on c.lineid_to = pl2.id
		inner join cities ct on pl.city_id = ct.id
		inner join cities ct2 on pl2.city_id = ct2.id
		inner join rates r on c.rate_id = r.id
	where pl.user_id = userid and createdon between datefrom and dateto+1;
end$$
DELIMITER ;

/*Bills report by user */

DELIMITER $$
CREATE PROCEDURE `sp_getBillsByUserByDate`(IN `datefrom` DATE,IN `dateto` DATE, IN `userid` INT)
begin
select
	b2.id as "Bill Number",
	concat( c2.arecode + pl.numberline) as "Line Billed",
	b2.calls_amount as "Calls Amount",
	b2.price_cost as "Cost Price",
	b2.price_final as "Total Price",
	b2.createdon as "Creation Day",
	b2.payday as "Pay Day",
	CASE
        WHEN b2.paid = 0 THEN "No"
        WHEN b2.paid = 1 THEN "Si"
    end as "Paid"
	from bills b2
	where b2.user_id = userid and createdon between datefrom and dateto+1;
end$$
DELIMITER ;


/* Destinos preferidos*/

DELIMITER $$
CREATE PROCEDURE `sp_getDestinationRankByUser`(IN `userid` INT, IN `top` INT)
begin
select
	concat(	ct2.arecode,pl2.numberline) as "Destination",
	count(c.lineid_to) as "CallAmount"
from calls c
	inner join phonelines pl on c.lineid_from = pl.id
	inner join phonelines pl2 on c.lineid_to = pl2.id
	inner join cities ct on pl.city_id = ct.id
	inner join cities ct2 on pl2.city_id = ct2.id
	inner join users u on pl.user_id = u.id
where pl.user_id = userid
group by lineid_to
order by count(c.lineid_to) desc
LIMIT top;
end$$
DELIMITER ;

/*-------------------------- Bill Action --------------------------*/
/*Bill Action el Job de Mysql llama una vez por mes al SP sp_monthlybills(), este SP hace un cursor por cada linea y llama al SP sp_billingCallbyline por cada linea y busca sus llamadas sin facturar   */

/* sp_facturarllamadasxlinea */

DELIMITER $$
CREATE PROCEDURE `sp_billingCallByLine`(IN `phonelineid` INT)
begin

	/*Get calls to be billed*/
	create temporary table callswithoutbill
	select id from calls c where c.lineid_from = phonelineid and bill_id is null;

	/*Create the bill */
	insert into bills (phoneline_id,user_id, calls_amount,price_cost, price_final,payday,createdon)
	select pl.id , pl.user_id , count(pl.id) as "calls_amount", sum(c.amount),sum(c.amount*1.21),(CURDATE() + INTERVAL 15 DAY ),now()
	from calls c
		inner join callswithoutbill temp on c.id = temp.id
		inner join phonelines pl on c.lineid_from = pl.id
	where pl.id = phonelineid and c.bill_id is null
	group by pl.id ;

	/*Update the calls billed*/
	update calls
	inner join callswithoutbill temp on calls.id = temp.id
	set calls.bill_id = LAST_INSERT_ID();
	drop table callswithoutbill;

end$$
DELIMITER ;

/* sp_monthlybills() */

DELIMITER $$
CREATE PROCEDURE `sp_monthlyBills`()
begin

   DECLARE done BOOLEAN DEFAULT 0;
   DECLARE idtemp INT;


   DECLARE phonelines_cur CURSOR
   FOR
   SELECT id FROM phonelines;

   DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET done=1;

   OPEN phonelines_cur;

   REPEAT

      FETCH phonelines_cur INTO idtemp;
   		call sp_billingCallByLine(idtemp);
   UNTIL done END REPEAT;

   CLOSE phonelines_cur;

end$$
DELIMITER ;

/* Billing event*/

DELIMITER $$
CREATE EVENT ev_monthbilling
ON SCHEDULE EVERY 1 MONTH
STARTS '2020-06-01 03:00:00.000'
ON COMPLETION NOT PRESERVE
ENABLE
DO BEGIN
call sp_monthlyBills();
END$$
DELIMITER ;

------------------------------------------------------------------------------------------------------------------------
DELIMITER $$
CREATE PROCEDURE `sp_CallsByUser`(userid int )
begin
	select
		c2.id,
		c2.lineid_from,
		c2.lineid_to,
		c2.duration,
		c2.rate_id,
		c2.amount,
		c2.createdon
	from calls c2
	inner join phonelines p2 on c2.lineid_from = p2.id
	inner join users u2 on p2.user_id = u2.id
	where u2.id = userid;
end$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `sp_reportCallsByUserByDate`(userid int,datefrom date,dateto date )
begin
	select
        concat(
            ct.arecode,
            pl.numberline
        ) as "NumeroOrigen",
        ct.name as "CiudadOrigen",
        concat(
            ct2.arecode,
            pl2.numberline
        ) as "NumeroDestino",
        ct2.name as "CiudadDestino",
        c.amount as "PrecioTotal",
        c.duration as "Duracion",
        c.createdon as "FechaLlamada"
    from calls c
        inner join phonelines pl on c.lineid_from = pl.id
        inner join phonelines pl2 on c.lineid_to = pl2.id
        inner join cities ct on pl.city_id = ct.id
        inner join cities ct2 on pl2.city_id = ct2.id
        inner join rates r on c.rate_id = r.id
    where pl.user_id = userid and createdon between datefrom and dateto+1;
end$$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE `sp_ratesBetweenAreaCodes`(areaCodefrom int, areaCodeTo int )
begin

	SET @areaCodeIdFrom = 0;
	SET @areaCodeIdTo = 0;

	select id into @areaCodeIdFrom from cities c where arecode = areaCodeFrom;

	if ( areaCodeTo is null ) then
		set @areaCodeIdTo = -1;
	else
		select id into @areaCodeIdTo from cities c where arecode = areaCodeTo;
	end if;

	if ( @areaCodeIdFrom > 0 and @areaCodeIdTo > 0 ) then

    		select ctf.name as 'Origen' , ctt.name as 'Destino' , r.price as 'Precio'
    		from rates r
    		inner join cities ctf on r.cityid_from = ctf.id
    		inner join cities ctt on r.cityid_to = ctt.id
    		where cityid_from = @areaCodeIdFrom and cityid_to = @areaCodeIdTo;

   	elseif ( @areaCodeIdFrom <> 0 and @areaCodeIdTo = -1 )	then

    		select ctf.name as 'Origen' , ctt.name as 'Destino' , r.price as 'Precio'
    		from rates r
    		inner join cities ctf on r.cityid_from = ctf.id
    		inner join cities ctt on r.cityid_to = ctt.id
    		where cityid_from = @areaCodeIdFrom;

    else
   			signal sqlstate '01000' set MESSAGE_TEXT = 'Ciudad Origen incorrecta o no existente', MYSQL_ERRNO =  1000;
    end if;
end$$
DELIMITER ;